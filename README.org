#+TITLE:Elixir is fun

* TODOs                                                           :prototype:

** Server

*** TODO [#C] learn phoenix framework
*** DONE [#B] make a docker image
    CLOSED: [2016-12-25 Sun 16:15]
*** TODO [#B] learn docker-compose
*** TODO [#A] connect to redis
*** TODO [#B] create phoenix channel
*** TODO [#B] learn elixir GenStage
*** TODO [#C] elixir umbrella

** Client

*** TODO [#C] learn elm
*** DONE [#A] connect to server
    CLOSED: [2016-12-30 Fri 09:06]
**** DONE CORS, server and client
     CLOSED: [2016-12-30 Fri 09:05]
*** WAITING [#A] build router with elm-route-url
*** TODO [#B] how to deploy elm?
**** TODO elm-make --output index.html
**** TODO elm-make --output index.js, w/ static files
**** TODO webpack 2
**** TODO nginx w/ static files
**** CANCELED elm-reactor
     CLOSED: [2016-12-26 Mon 11:22] elm-reactor run in debug mode
**** CANCELED node http-server
     CLOSED: [2016-12-26 Mon 11:25] memory leak, random crash, etc
**** CANCELED haskell w/ elm, maybe Snap framework
     CLOSED: [2016-12-26 Mon 11:27] learning curve
*** STARTED [#A] make ui, e.g. elm-mdl
**** TODO elm-mdl
**** CANCELED elm-native-ui
     CLOSED: [2016-12-31 Sat]
**** TODO elm-css
*** TODO [#B] connect w/ WebRTC (better)
*** TODO [#B] connect to phoenix channel
*** TODO [#C] make a docker image*
*** TODO [#C] connect to server docker

* How to setup environment

** On the development machine

1. Erlang
2. Elixir
3. Docker
4. Git

** Setup environment

#+BEGIN_SRC bash
$ make setup
#+END_SRC

* How to make docker image

** Make docker image

#+BEGIN_SRC bash
$ make image
#+END_SRC

** How to fix edib build errors

*** [[https://github.com/edib-tool/docker-elixir-dev]]

#+BEGIN_SRC diff
diff --git a/Dockerfile b/Dockerfile
index 15dcbec..2ae8f21 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -3,7 +3,7 @@ MAINTAINER Christoph Grabo <edib@markentier.com>
 
 *RUN apk --update add 'elixir<1.4.0' && rm -rf /var/cache/apk/*
 
-ENV ELIXIR_VERSION 1.3.3
+ENV ELIXIR_VERSION 1.3.4
 
 RUN curl -sSL https://github.com/elixir-lang/elixir/releases/download/v${ELIXIR_VERSION}/Precompiled.zip \
     -o Precompiled.zip && \
#+END_SRC

#+BEGIN_SRC bash
$ docker build -t edib/elixir-phoenix-dev:1.3 .
#+END_SRC

*** [[https://github.com/edib-tool/docker-edib-tool]]

#+BEGIN_SRC diff
diff --git a/edib/shared.mk b/edib/shared.mk
index 1924937..694fd58 100644
--- a/edib/shared.mk
+++ b/edib/shared.mk
@@ -10,7 +10,7 @@ APP_VER        = $(shell $(APPINFO_RUNNER) version)
 
 MIX_ENV       ?= prod
 RELEASE        = releases/$(APP_VER)/$(APP_NAME).tar.gz
-RELEASE_PATH   = $(APP_DIR)/rel/$(APP_NAME)
+RELEASE_PATH   = $(APP_DIR)/_build/$(MIX_ENV)/rel/$(APP_NAME)
 RELEASE_FILE   = $(RELEASE_PATH)/$(RELEASE)
 
 STAGE_DIR      = /stage
diff --git a/tools/libdeps.exs b/tools/libdeps.exs
index 2399b70..4b93518 100755
--- a/tools/libdeps.exs
+++ b/tools/libdeps.exs
@@ -1,6 +1,6 @@
 *!/usr/bin/env elixir
 defmodule Libdeps do
-  @relpath "app/rel"
+  @relpath "app/_build"
   @lddpath_regex ~r/\/(lib|usr\/lib)[^ ]+/
 
   def all_files do
#+END_SRC

#+BEGIN_SRC bash
$ docker build -t edib/edib-tool:1.4.0 .
#+END_SRC

* /How to create the server/
** Create the server

#+BEGIN_SRC bash
$ mix phoenix.new --no-brunch --no-ecto --no-html server --app chatty
#+END_SRC

** Adding prod.secret.exs.example to a git Repository

[[http://sgeos.github.io/phoenix/elixir/git/2016/07/18/phoenix-adding-prod-secret-exs-example-to-git-repository.html]]

*** Add the ~config/prod.secret.exs.example~

#+BEGIN_SRC bash
$ cp server/config/prod.secret.exs server/config/prod.secret.exs.example
#+END_SRC

#+BEGIN_SRC elixir
# Regenerate config/prod.secret.exs with the following commands
#   $ SECRET_KEY_BASE=$(elixir -e ":crypto.strong_rand_bytes(48) |> Base.encode64 |> IO.puts")
#   $ sed "s|SECRET+KEY+BASE|$SECRET_KEY_BASE|" config/prod.secret.exs.example >config/prod.secret.exs
config :memo_api, MemoApi.Endpoint,
  secret_key_base: "SECRET+KEY+BASE"
#+END_SRC

*** Regenerate ~config/prod.secret.exs~

#+BEGIN_SRC shell
SECRET_KEY_BASE=$(elixir -e ":crypto.strong_rand_bytes(48) |> Base.encode64 |> IO.puts")
sed "s|SECRET+KEY+BASE|$SECRET_KEY_BASE|" config/prod.secret.exs.example >config/prod.secret.exs
#+END_SRC

* Reference
** Guides
*** Elxir: [[http://elixir-lang.org/getting-started/introduction.html]]
*** Mix, OTP, ExUnit: [[http://elixir-lang.org/getting-started/mix-otp/introduction-to-mix.html]]
**** [[http://elixir-lang.org/getting-started/mix-otp/dependencies-and-umbrella-apps.html#umbrella-projects][Umbrella projects]]
**** [[http://elixir-lang.org/getting-started/mix-otp/docs-tests-and-with.html][Docs, tests and with]]
*** GenStage
**** [[http://elixir-lang.org/blog/2016/07/14/announcing-genstage/][Announcing GenStage]]
     GenStage is a new Elixir behaviour for exchanging events with back-pressure between Elixir processes.
** Awesome Elixir: [[https://github.com/h4cc/awesome-elixir]]
*** Authentication
**** [[https://github.com/ueberauth/guardian][guardian]] - An authentication framework for use with Elixir applications.
*** Code Analysis
**** [[https://github.com/rrrene/credo][credo]] - A static code analysis tool with a focus on code consistency and teaching Elixir.
*** Documentation
**** [[https://github.com/elixir-lang/ex_doc][ex_doc]] - ExDoc is a tool to generate documentation for your Elixir projects.
*** Framework Components
**** [[https://github.com/whatyouhide/corsica][corsica]] - Elixir library for dealing with CORS requests.
*** ORM and Datamapping
**** [[https://github.com/ephe-meral/ex_sider][ex_sider]] - Elixir Map/List/Set interfaces for Redis data structures (uses Redix, but that is configurable).
**** [[https://github.com/whatyouhide/redix][redix]] - Superfast, pipelined, resilient Redis driver for Elixir.
*** Testing
**** [[https://hexdocs.pm/ex_unit/ExUnit.html][ExUnit]] - Unit testing framework for Elixir.
**** [[https://github.com/jjh42/mock][mock]] - Mocking library for the Elixir language.
